// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package decomposepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DecomposeServiceClient is the client API for DecomposeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecomposeServiceClient interface {
	PrimeNumberDecompose(ctx context.Context, in *DecomposeRequest, opts ...grpc.CallOption) (DecomposeService_PrimeNumberDecomposeClient, error)
}

type decomposeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDecomposeServiceClient(cc grpc.ClientConnInterface) DecomposeServiceClient {
	return &decomposeServiceClient{cc}
}

func (c *decomposeServiceClient) PrimeNumberDecompose(ctx context.Context, in *DecomposeRequest, opts ...grpc.CallOption) (DecomposeService_PrimeNumberDecomposeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DecomposeService_ServiceDesc.Streams[0], "/decompose.DecomposeService/PrimeNumberDecompose", opts...)
	if err != nil {
		return nil, err
	}
	x := &decomposeServicePrimeNumberDecomposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DecomposeService_PrimeNumberDecomposeClient interface {
	Recv() (*DecomposeResponse, error)
	grpc.ClientStream
}

type decomposeServicePrimeNumberDecomposeClient struct {
	grpc.ClientStream
}

func (x *decomposeServicePrimeNumberDecomposeClient) Recv() (*DecomposeResponse, error) {
	m := new(DecomposeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DecomposeServiceServer is the server API for DecomposeService service.
// All implementations should embed UnimplementedDecomposeServiceServer
// for forward compatibility
type DecomposeServiceServer interface {
	PrimeNumberDecompose(*DecomposeRequest, DecomposeService_PrimeNumberDecomposeServer) error
}

// UnimplementedDecomposeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDecomposeServiceServer struct {
}

func (UnimplementedDecomposeServiceServer) PrimeNumberDecompose(*DecomposeRequest, DecomposeService_PrimeNumberDecomposeServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecompose not implemented")
}

// UnsafeDecomposeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecomposeServiceServer will
// result in compilation errors.
type UnsafeDecomposeServiceServer interface {
	mustEmbedUnimplementedDecomposeServiceServer()
}

func RegisterDecomposeServiceServer(s grpc.ServiceRegistrar, srv DecomposeServiceServer) {
	s.RegisterService(&DecomposeService_ServiceDesc, srv)
}

func _DecomposeService_PrimeNumberDecompose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DecomposeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecomposeServiceServer).PrimeNumberDecompose(m, &decomposeServicePrimeNumberDecomposeServer{stream})
}

type DecomposeService_PrimeNumberDecomposeServer interface {
	Send(*DecomposeResponse) error
	grpc.ServerStream
}

type decomposeServicePrimeNumberDecomposeServer struct {
	grpc.ServerStream
}

func (x *decomposeServicePrimeNumberDecomposeServer) Send(m *DecomposeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DecomposeService_ServiceDesc is the grpc.ServiceDesc for DecomposeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecomposeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "decompose.DecomposeService",
	HandlerType: (*DecomposeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumberDecompose",
			Handler:       _DecomposeService_PrimeNumberDecompose_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "decompose/decomposepb/decompose_service.proto",
}
